
this.geometry = new three.PlaneBufferGeometry(this.constWork.width, this.constWork.height, Math.round(this.constWork.width / 10), Math.round(this.constWork.height / 10))
this.geometry.boundingSphere = new three.Sphere(new three.Vector3, 1e6)
this.texture1 = new three.Texture(null, null, three.ClampToEdgeWrapping, three.ClampToEdgeWrapping, three.LinearFilter, three.LinearFilter)
this.texture2 = new three.Texture(null, null, three.ClampToEdgeWrapping, three.ClampToEdgeWrapping, three.LinearFilter, three.LinearFilter);

var uniforms = {
  time: {
    value: l.uniformTime.value
  },
  texture1: {
    value: this.texture1
  },
  texture2: {
    value: this.texture2
  },
  textureSize: {
    value: new three.Vector4(this.constWork.width, this.constWork.height, this.constWork.width / this.constWork.height)
  },
  opacity: {
    value: 1
  },
  hover: {
    value: new three.Vector3(.5, .5, 0)
  },
  corners: {
    value: new three.Vector4(0, 0, 0, 0)
  },
  sway: {
    value: 0
  },
  zoomScale: {
    value: 0
  },
  rotation: {
    value: 0
  },
  progress: {
    value: 0
  },
  translate: {
    value: new three.Vector2(-.2, .4)
  },
  delay: {
    value: new three.Vector2(1, 1)
  },
  edge: {
    value: 0
  },
  accel: {
    value: new three.Vector2(2, 2)
  },
  waveAmpFreq: {
    value: new three.Vector4(0, .5, 0, 4)
  },
  waveSpeedPhase: {
    value: new three.Vector4(0, .3, 0, 0)
  },
  waveBlend: {
    value: new three.Vector2(.2, .8)
  }
}

const t = new three.RawShaderMaterial({
  blending: three.NormalBlending,
  side: three.FrontSide,
  transparent: true,
  vertexShader: o(74),
  fragmentShader: o(73),
  uniforms
})

const mesh = new three.Mesh(this.geometry, t)

this.mesh = mesh
this.container = new three.Object3D()
this.container.add(mesh)
this.material = mesh.material
this.uniforms = this.material.uniforms
n.threeManager.container.add(this.container)

